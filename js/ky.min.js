/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/ky@0.11.0/index.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const getGlobal=t=>"undefined"!=typeof self&&self&&t in self?self[t]:"undefined"!=typeof window&&window&&t in window?window[t]:"undefined"!=typeof global&&global&&t in global?global[t]:"undefined"!=typeof globalThis&&globalThis?globalThis[t]:void 0,document=getGlobal("document"),Headers=getGlobal("Headers"),Response=getGlobal("Response"),ReadableStream=getGlobal("ReadableStream"),fetch=getGlobal("fetch"),AbortController=getGlobal("AbortController"),FormData=getGlobal("FormData"),isObject=t=>null!==t&&"object"==typeof t,supportsAbortController="function"==typeof AbortController,supportsStreams="function"==typeof ReadableStream,supportsFormData="function"==typeof FormData,deepMerge=(...t)=>{let e={};for(const o of t)if(Array.isArray(o))Array.isArray(e)||(e=[]),e=[...e,...o];else if(isObject(o))for(let[t,r]of Object.entries(o))isObject(r)&&Reflect.has(e,t)&&(r=deepMerge(e[t],r)),e={...e,[t]:r};return e},requestMethods=["get","post","put","patch","head","delete"],responseTypes={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},retryMethods=new Set(["get","put","head","delete","options","trace"]),retryStatusCodes=new Set([408,413,429,500,502,503,504]),retryAfterStatusCodes=new Set([413,429,503]);class HTTPError extends Error{constructor(t){super(t.statusText),this.name="HTTPError",this.response=t}}class TimeoutError extends Error{constructor(){super("Request timed out"),this.name="TimeoutError"}}const delay=t=>new Promise((e,o)=>{t>2147483647?o(new RangeError("The `timeout` option cannot be greater than 2147483647")):setTimeout(e,t)}),timeout=(t,e,o)=>new Promise((r,s)=>{t.then(r).catch(s),delay(e).then(()=>{supportsAbortController&&o.abort(),s(new TimeoutError)}).catch(s)}),normalizeRequestMethod=t=>requestMethods.includes(t)?t.toUpperCase():t;class Ky{constructor(t,{timeout:e=1e4,hooks:o,throwHttpErrors:r=!0,searchParams:s,json:n,...i}){if(this._retryCount=0,this._options={method:"get",credentials:"same-origin",retry:2,...i},supportsAbortController&&(this.abortController=new AbortController,this._options.signal&&this._options.signal.addEventListener("abort",()=>{this.abortController.abort()}),this._options.signal=this.abortController.signal),this._options.method=normalizeRequestMethod(this._options.method),this._options.prefixUrl=String(this._options.prefixUrl||""),this._input=String(t||""),this._options.prefixUrl&&this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");if(this._options.prefixUrl&&!this._options.prefixUrl.endsWith("/")&&(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input,s){const t=new URL(this._input,document&&document.baseURI);if("string"==typeof s||URLSearchParams&&s instanceof URLSearchParams)t.search=s;else{if(!Object.values(s).every(t=>"number"==typeof t||"string"==typeof t))throw new Error("The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values");t.search=new URLSearchParams(s).toString()}this._input=t.toString()}this._timeout=e,this._hooks=deepMerge({beforeRequest:[],afterResponse:[]},o),this._throwHttpErrors=r;const a=new Headers(this._options.headers||{});if((supportsFormData&&this._options.body instanceof FormData||this._options.body instanceof URLSearchParams)&&a.has("content-type"))throw new Error(`The \`content-type\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);if(n){if(this._options.body)throw new Error("The `json` option cannot be used with the `body` option");a.set("content-type","application/json"),this._options.body=JSON.stringify(n)}this._options.headers=a;const h=async()=>{await delay(1);let t=await this._fetch();for(const e of this._hooks.afterResponse){const o=await e(t.clone());o instanceof Response&&(t=o)}if(!t.ok&&this._throwHttpErrors)throw new HTTPError(t);if(this._options.onDownloadProgress){if("function"!=typeof this._options.onDownloadProgress)throw new TypeError("The `onDownloadProgress` option must be a function");if(!supportsStreams)throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");return this._stream(t.clone(),this._options.onDownloadProgress)}return t},l=retryMethods.has(this._options.method.toLowerCase())?this._retry(h):h();for(const[t,e]of Object.entries(responseTypes))l[t]=(async()=>(a.set("accept",e),(await l).clone()[t]()));return l}_calculateRetryDelay(t){if(this._retryCount++,this._retryCount<this._options.retry&&!(t instanceof TimeoutError)){if(t instanceof HTTPError){if(!retryStatusCodes.has(t.response.status))return 0;const e=t.response.headers.get("Retry-After");if(e&&retryAfterStatusCodes.has(t.response.status)){let t=Number(e);return Number.isNaN(t)?t=Date.parse(e)-Date.now():t*=1e3,t}if(413===t.response.status)return 0}return.3*2**(this._retryCount-1)*1e3}return 0}async _retry(t){try{return await t()}catch(e){const o=this._calculateRetryDelay(e);if(0!==o&&this._retryCount>0)return await delay(o),this._retry(t);if(this._throwHttpErrors)throw e}}async _fetch(){for(const t of this._hooks.beforeRequest)await t(this._options);return!1===this._timeout?fetch(this._input,this._options):timeout(fetch(this._input,this._options),this._timeout,this.abortController)}_stream(t,e){const o=Number(t.headers.get("content-length"))||0;let r=0;return new Response(new ReadableStream({start(s){const n=t.body.getReader();e&&e({percent:0,transferredBytes:0,totalBytes:o},new Uint8Array),async function t(){const{done:i,value:a}=await n.read();i?s.close():(e&&(r+=a.byteLength,e({percent:0===o?0:r/o,transferredBytes:r,totalBytes:o},a)),s.enqueue(a),t())}()}}))}}const validateAndMerge=(...t)=>{for(const e of t)if((!isObject(e)||Array.isArray(e))&&void 0!==e)throw new TypeError("The `options` argument must be an object");return deepMerge({},...t)},createInstance=t=>{const e=(e,o)=>new Ky(e,validateAndMerge(t,o));for(const o of requestMethods)e[o]=((e,r)=>new Ky(e,validateAndMerge(t,r,{method:o})));return e.create=(t=>createInstance(validateAndMerge(t))),e.extend=(e=>createInstance(validateAndMerge(t,e))),e};export default createInstance();export{HTTPError,TimeoutError};
//# sourceMappingURL=/sm/cb7f40b1a59d2060db5f749a779854b00b4218d172cfc6c7bca94768f89c634d.map